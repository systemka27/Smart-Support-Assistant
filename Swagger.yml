openapi: 3.0.3
info:
  title: Smart Support Assistant API
  description: |
    API для системы поддержки с AI-агентом и эскалацией к операторам.
    Система предоставляет интеллектуальную обработку запросов клиентов
    с возможностью автоматического ответа AI-агентом или эскалации к живым операторам.
  version: 1.0.0
  contact:
    name: API Support
    email: support@smartsupport.example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.smartsupport.example.com/v1
    description: Production server
  - url: https://sandbox.smartsupport.example.com/v1
    description: Sandbox server
  - url: http://localhost:3000/v1
    description: Local development server

tags:
  - name: clients
    description: Операции с клиентами системы поддержки
  - name: operators
    description: Управление операторами поддержки
  - name: chats
    description: Работа с чатами и сообщениями
  - name: ai-agent
    description: Взаимодействие с AI-агентом
  - name: escalation
    description: Эскалация запросов к операторам

security:
  - BearerAuth: []

paths:
  # Клиенты
  /clients:
    get:
      tags: [clients]
      summary: Получение списка клиентов
      description: Возвращает список клиентов с поддержкой пагинации и поиска
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: search
          in: query
          schema:
            type: string
          description: Поиск по имени или email клиента
      responses:
        '200':
          description: Список клиентов успешно получен
          content:
            application/json:
              schema:
                type: object
                properties:
                  clients:
                    type: array
                    items:
                      $ref: '#/components/schemas/Client'
                  total:
                    type: integer
                    example: 100
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 50
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [clients]
      summary: Создание нового клиента
      description: Добавляет нового клиента в систему
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCreateRequest'
      responses:
        '201':
          description: Клиент успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Конфликт (клиент с таким email уже существует)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /clients/{clientId}:
    get:
      tags: [clients]
      summary: Получение информации о клиенте
      description: Возвращает детальную информацию о клиенте
      parameters:
        - $ref: '#/components/parameters/ClientIdParam'
      responses:
        '200':
          description: Информация о клиенте успешно получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags: [clients]
      summary: Обновление информации о клиенте
      description: Обновляет данные клиента
      parameters:
        - $ref: '#/components/parameters/ClientIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientUpdateRequest'
      responses:
        '200':
          description: Данные клиента успешно обновлены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags: [clients]
      summary: Удаление клиента
      description: Удаляет клиента из системы
      parameters:
        - $ref: '#/components/parameters/ClientIdParam'
      responses:
        '204':
          description: Клиент успешно удален
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Операторы
  /operators:
    get:
      tags: [operators]
      summary: Получение списка операторов
      description: Возвращает список операторов с поддержкой пагинации
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: status
          in: query
          schema:
            type: string
            enum: [online, offline, busy]
          description: Фильтр по статусу оператора
      responses:
        '200':
          description: Список операторов успешно получен
          content:
            application/json:
              schema:
                type: object
                properties:
                  operators:
                    type: array
                    items:
                      $ref: '#/components/schemas/Operator'
                  total:
                    type: integer
                    example: 25
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 50
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [operators]
      summary: Создание нового оператора
      description: Добавляет нового оператора в систему
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperatorCreateRequest'
      responses:
        '201':
          description: Оператор успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operator'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Конфликт (оператор с таким email уже существует)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /operators/{operatorId}:
    get:
      tags: [operators]
      summary: Получение информации об операторе
      description: Возвращает детальную информацию об операторе
      parameters:
        - $ref: '#/components/parameters/OperatorIdParam'
      responses:
        '200':
          description: Информация об операторе успешно получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operator'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags: [operators]
      summary: Обновление информации об операторе
      description: Обновляет данные оператора
      parameters:
        - $ref: '#/components/parameters/OperatorIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperatorUpdateRequest'
      responses:
        '200':
          description: Данные оператора успешно обновлены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operator'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags: [operators]
      summary: Удаление оператора
      description: Удаляет оператора из системы
      parameters:
        - $ref: '#/components/parameters/OperatorIdParam'
      responses:
        '204':
          description: Оператор успешно удален
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Чаты
  /chats:
    get:
      tags: [chats]
      summary: Получение списка чатов
      description: Возвращает список чатов с поддержкой фильтрации и пагинации
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: status
          in: query
          schema:
            type: string
            enum: [open, in_progress, resolved, closed]
          description: Фильтр по статусу чата
        - name: client_id
          in: query
          schema:
            type: integer
          description: Фильтр по ID клиента
        - name: operator_id
          in: query
          schema:
            type: integer
          description: Фильтр по ID оператора
      responses:
        '200':
          description: Список чатов успешно получен
          content:
            application/json:
              schema:
                type: object
                properties:
                  chats:
                    type: array
                    items:
                      $ref: '#/components/schemas/Chat'
                  total:
                    type: integer
                    example: 100
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 50
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [chats]
      summary: Создание нового чата
      description: Создает новый чат для клиента
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCreateRequest'
      responses:
        '201':
          description: Чат успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Клиент не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /chats/{chatId}:
    get:
      tags: [chats]
      summary: Получение информации о чате
      description: Возвращает детальную информацию о чате
      parameters:
        - $ref: '#/components/parameters/ChatIdParam'
      responses:
        '200':
          description: Информация о чате успешно получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags: [chats]
      summary: Обновление информации о чате
      description: Обновляет данные чата (статус, назначенного оператора)
      parameters:
        - $ref: '#/components/parameters/ChatIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatUpdateRequest'
      responses:
        '200':
          description: Данные чата успешно обновлены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /chats/{chatId}/messages:
    get:
      tags: [chats]
      summary: Получение переписки чата
      description: Возвращает все сообщения из указанного чата с поддержкой пагинации
      parameters:
        - $ref: '#/components/parameters/ChatIdParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Переписка успешно получена
          content:
            application/json:
              schema:
                type: object
                properties:
                  chat_id:
                    type: integer
                    example: 123
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  total:
                    type: integer
                    example: 45
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 50
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [chats]
      summary: Отправка сообщения в чат
      description: Отправляет новое сообщение в указанный чат
      parameters:
        - $ref: '#/components/parameters/ChatIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageCreateRequest'
      responses:
        '201':
          description: Сообщение успешно отправлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # AI-агент
  /ai-agent/process:
    post:
      tags: [ai-agent]
      summary: Обработка запроса AI-агентом
      description: |
        Отправляет запрос клиента AI-агенту для обработки и получения ответа.
        AI-агент анализирует запрос и возвращает наиболее подходящий ответ.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIProcessRequest'
      responses:
        '200':
          description: Запрос успешно обработан AI-агентом
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIProcessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          description: Слишком много запросов к AI-агенту
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          description: AI-агент временно недоступен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /ai-agent/status:
    get:
      tags: [ai-agent]
      summary: Получение статуса AI-агента
      description: Возвращает текущий статус и метрики работы AI-агента
      responses:
        '200':
          description: Статус AI-агента успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIStatus'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    # Эскалация
  /escalation/request:
    post:
      tags: [escalation]
      summary: Запрос эскалации к оператору
      description: |
        Запрашивает эскалацию чата к живому оператору.
        AI-агент передает чат оператору для дальнейшего ведения.
      parameters:
        - $ref: '#/components/parameters/ChatIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EscalationRequest'
      responses:
        '200':
          description: Эскалация успешно запрошена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscalationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /escalation/status/{chatId}:
    get:
      tags: [escalation]
      summary: Получение статуса эскалации
      description: Возвращает текущий статус эскалации для указанного чата
      parameters:
        - $ref: '#/components/parameters/ChatIdParam'
      responses:
        '200':
          description: Статус эскалации успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscalationStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT токен для аутентификации пользователей

  parameters:
    PageParam:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Номер страницы для пагинации
    
    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 50
      description: Количество элементов на странице
    
    ClientIdParam:
      name: clientId
      in: path
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
      description: Уникальный идентификатор клиента
    
    OperatorIdParam:
      name: operatorId
      in: path
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
      description: Уникальный идентификатор оператора
    
    ChatIdParam:
      name: chatId
      in: path
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
      description: Уникальный идентификатор чата

  responses:
    BadRequest:
      description: Неверный запрос
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            invalid-data:
              value:
                code: 400
                message: "Неверные данные запроса"
                details: "Проверьте корректность отправляемых данных"
    
    Unauthorized:
      description: Неавторизованный доступ
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            invalid-token:
              value:
                code: 401
                message: "Недействительный токен доступа"
                details: "Требуется действительный JWT токен"
    
    NotFound:
      description: Ресурс не найден
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            resource-not-found:
              value:
                code: 404
                message: "Ресурс не найден"
                details: "Запрошенный ресурс не существует в системе"
    
    InternalServerError:
      description: Внутренняя ошибка сервера
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            server-error:
              value:
                code: 500
                message: "Внутренняя ошибка сервера"
                details: "Произошла непредвиденная ошибка при обработке запроса"

  schemas:
    Error:
      type: object
      description: Стандартизированный формат ответа об ошибке
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: Код ошибки HTTP
          example: 404
        message:
          type: string
          description: Краткое описание ошибки
          example: "Ресурс не найден"
        details:
          type: string
          description: Детальное описание ошибки
          example: "Запись с указанным ID не существует"
        timestamp:
          type: string
          format: date-time
          description: Время возникновения ошибки
          example: "2024-01-15T10:30:45Z"

    Client:
      type: object
      description: Модель клиента системы поддержки
      required:
        - client_id
        - name
        - email
        - created_at
      properties:
        client_id:
          type: integer
          format: int64
          minimum: 1
          description: Уникальный идентификатор клиента
          example: 42
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Полное имя клиента
          example: "Иван Иванов"
        email:
          type: string
          format: email
          maxLength: 255
          description: Email адрес клиента
          example: "ivan@example.com"
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
          description: Номер телефона в международном формате
          example: "+79991234567"
          nullable: true
        created_at:
          type: string
          format: date-time
          description: Дата и время создания клиента
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Дата и время последнего обновления клиента
          example: "2024-01-15T10:30:00Z"
          nullable: true

    ClientCreateRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Иван Иванов"
        email:
          type: string
          format: email
          maxLength: 255
          example: "ivan@example.com"
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
          example: "+79991234567"
          nullable: true

    ClientUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Иван Иванов"
        email:
          type: string
          format: email
          maxLength: 255
          example: "ivan@example.com"
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
          example: "+79991234567"
          nullable: true

    Operator:
      type: object
      description: Модель оператора поддержки
      required:
        - operator_id
        - name
        - email
        - status
        - created_at
      properties:
        operator_id:
          type: integer
          format: int64
          minimum: 1
          description: Уникальный идентификатор оператора
          example: 1
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Полное имя оператора
          example: "Анна Петрова"
        email:
          type: string
          format: email
          maxLength: 255
          description: Email адрес оператора
          example: "anna@example.com"
        status:
          type: string
          enum: [online, offline, busy]
          description: Текущий статус оператора
          example: "online"
        created_at:
          type: string
          format: date-time
          description: Дата и время создания оператора
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Дата и время последнего обновления оператора
          example: "2024-01-15T10:30:00Z"
          nullable: true

    OperatorCreateRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Анна Петрова"
        email:
          type: string
          format: email
          maxLength: 255
          example: "anna@example.com"
        status:
          type: string
          enum: [online, offline, busy]
          example: "online"

    OperatorUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Анна Петрова"
        email:
          type: string
          format: email
          maxLength: 255
          example: "anna@example.com"
        status:
          type: string
          enum: [online, offline, busy]
          example: "online"

    Chat:
      type: object
      description: Модель чата поддержки
      required:
        - chat_id
        - client_id
        - status
        - created_at
      properties:
        chat_id:
          type: integer
          format: int64
          minimum: 1
          description: Уникальный идентификатор чата
          example: 123
        client_id:
          type: integer
          format: int64
          minimum: 1
          description: Идентификатор клиента
          example: 42
        operator_id:
          type: integer
          format: int64
          minimum: 1
          description: Идентификатор оператора
          example: 1
          nullable: true
        status:
          type: string
          enum: [open, in_progress, resolved, closed]
          description: Статус чата
          example: "open"
        created_at:
          type: string
          format: date-time
          description: Дата и время создания чата
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Дата и время последнего обновления чата
          example: "2024-01-15T10:30:00Z"
          nullable: true
        resolved_at:
          type: string
          format: date-time
          description: Дата и время разрешения чата
          example: "2024-01-15T10:30:00Z"
          nullable: true

    ChatCreateRequest:
      type: object
      required:
        - client_id
      properties:
        client_id:
          type: integer
          format: int64
          minimum: 1
          example: 42

    ChatUpdateRequest:
      type: object
      properties:
        operator_id:
          type: integer
          format: int64
          minimum: 1
          example: 1
          nullable: true
        status:
          type: string
          enum: [open, in_progress, resolved, closed]
          example: "resolved"

    Message:
      type: object
      description: Модель сообщения в чате
      required:
        - message_id
        - chat_id
        - sender_type
        - content
        - sent_time
      properties:
        message_id:
          type: integer
          format: int64
          minimum: 1
          description: Уникальный идентификатор сообщения
          example: 1001
        chat_id:
          type: integer
          format: int64
          minimum: 1
          description: Идентификатор чата
          example: 123
        sender_type:
          type: string
          enum: [client, operator, ai_agent]
          description: Тип отправителя
          example: "client"
        sender_id:
          type: integer
          format: int64
          minimum: 1
          description: Идентификатор отправителя
          example: 42
          nullable: true
        content:
          type: string
          maxLength: 5000
          description: Текст сообщения
          example: "Здравствуйте, я оплатил заказ, но он до сих пор числится как неоплаченный. Что делать?"
        sent_time:
          type: string
          format: date-time
          description: Время отправки сообщения
          example: "2024-01-15T10:30:45Z"
        read:
          type: boolean
          description: Флаг прочтения сообщения
          example: true
          default: false

    MessageCreateRequest:
      type: object
      required:
        - sender_type
        - content
      properties:
        sender_type:
          type: string
          enum: [client, operator, ai_agent]
          example: "client"
        sender_id:
          type: integer
          format: int64
          minimum: 1
          example: 42
          nullable: true
        content:
          type: string
          maxLength: 5000
          example: "Здравствуйте, у меня вопрос по заказу"

    AIProcessRequest:
      type: object
      required:
        - chat_id
        - message
      properties:
        chat_id:
          type: integer
          format: int64
          minimum: 1
          example: 123
        message:
          type: string
          maxLength: 5000
          example: "Здравствуйте, я оплатил заказ, но он до сих пор числится как неоплаченный"
        context:
          type: object
          description: Дополнительный контекст для AI-агента
          nullable: true

    AIProcessResponse:
      type: object
      required:
        - success
        - response
      properties:
        success:
          type: boolean
          description: Флаг успешной обработки запроса
          example: true
        response:
          type: string
          description: Ответ AI-агента
          example: "Проверил ваш заказ. Оплата действительно прошла, статус обновится в течение 5-10 минут."
        confidence:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Уверенность AI-агента в ответе
          example: 0.95
        suggested_escalation:
          type: boolean
          description: Рекомендация по эскалации к оператору
          example: false

    AIStatus:
      type: object
      required:
        - status
        - version
      properties:
        status:
          type: string
          enum: [online, offline, degraded]
          description: Текущий статус AI-агента
          example: "online"
        version:
          type: string
          description: Версия AI-модели
          example: "2.1.0"
        response_time_avg:
          type: number
          format: float
          description: Среднее время ответа в миллисекундах
          example: 245.5
        requests_processed:
          type: integer
          description: Количество обработанных запросов
          example: 12456
        error_rate:
          type: number
          format: float
          description: Процент ошибок обработки
          example: 0.02

    EscalationRequest:
      type: object
      required:
        - reason
      properties:
        reason:
          type: string
          maxLength: 1000
          description: Причина эскалации
          example: "Клиент требует разговора с живым оператором"
        priority:
          type: string
          enum: [low, medium, high, urgent]
          description: Приоритет эскалации
          example: "medium"
          default: "medium"

    EscalationResponse:
      type: object
      required:
        - success
        - escalation_id
      properties:
        success:
          type: boolean
          description: Флаг успешной эскалации
          example: true
        escalation_id:
          type: integer
          format: int64
          description: Идентификатор эскалации
          example: 456
        estimated_wait_time:
          type: integer
          description: Примерное время ожидания в секундах
          example: 120
        assigned_operator_id:
          type: integer
          format: int64
          description: Идентификатор назначенного оператора
          example: 1
          nullable: true

    EscalationStatus:
      type: object
      required:
        - status
        - escalation_id
      properties:
        status:
          type: string
          enum: [pending, in_progress, completed, cancelled]
          description: Статус эскалации
          example: "in_progress"
        escalation_id:
          type: integer
          format: int64
          description: Идентификатор эскалации
          example: 456
        chat_id:
          type: integer
          format: int64
          description: Идентификатор чата
          example: 123
        requested_at:
          type: string
          format: date-time
          description: Время запроса эскалации
          example: "2024-01-15T10:30:00Z"
        assigned_operator_id:
          type: integer
          format: int64
          description: Идентификатор назначенного оператора
          example: 1
          nullable: true
        assigned_at:
          type: string
          format: date-time
          description: Время назначения оператора
          example: "2024-01-15T10:32:00Z"
          nullable: true
        completed_at:
          type: string
          format: date-time
          description: Время завершения эскалации
          example: "2024-01-15T10:45:00Z"
          nullable: true
        estimated_wait_time:
          type: integer
          description: Оставшееся время ожидания в секундах
          example: 60
          nullable: true
        priority:
          type: string
          enum: [low, medium, high, urgent]
          description: Приоритет эскалации
          example: "medium"
        reason:
          type: string
          description: Причина эскалации
          example: "Клиент требует разговора с живым оператором"